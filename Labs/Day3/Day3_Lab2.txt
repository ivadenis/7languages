Step 0) 

	user=> (defn fac [x] (if (<= x 1) 1 (* x (fac (- x 1)))))
	(fac 10)
	#'user/fac
	user=> 3628800
	user=> (map (fn [x] (* x x)) (range 1 100))
	
	
	(1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529
	 576 625 676 729 784 841 900 961 1024 1089 1156 1225 1296 1369 1444 1521 1600 16
	81 1764 1849 1936 2025 2116 2209 2304 2401 2500 2601 2704 2809 2916 3025 3136 32
	49 3364 3481 3600 3721 3844 3969 4096 4225 4356 4489 4624 4761 4900 5041 5184 53
	29 5476 5625 5776 5929 6084 6241 6400 6561 6724 6889 7056 7225 7396 7569 7744 79
	21 8100 8281 8464 8649 8836 9025 9216 9409 9604 9801)
	
Step 1)

	2)
		
		F:\Dropbox\HEIG\Summer University\SevenLanguages>java Swaps
		[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19], [20,
		21, 22, 23, 24, 25, 26, 27, 28, 29], [30, 31, 32, 33, 34, 35, 36, 37, 38, 39], [
		40, 41, 42, 43, 44, 45, 46, 47, 48, 49], [50, 51, 52, 53, 54, 55, 56, 57, 58, 59
		], [60, 61, 62, 63, 64, 65, 66, 67, 68, 69], [70, 71, 72, 73, 74, 75, 76, 77, 78
		, 79], [80, 81, 82, 83, 84, 85, 86, 87, 88, 89], [90, 91, 92, 93, 94, 95, 96, 97
		, 98, 99], [100, 101, 102, 103, 104, 105, 106, 107, 108, 109], [110, 111, 112, 1
		13, 114, 115, 116, 117, 118, 119], [120, 121, 122, 123, 124, 125, 126, 127, 128,
		 129], [130, 131, 132, 133, 134, 135, 136, 137, 138, 139], [140, 141, 142, 143,
		144, 145, 146, 147, 148, 149], [150, 151, 152, 153, 154, 155, 156, 157, 158, 159
		], [160, 161, 162, 163, 164, 165, 166, 167, 168, 169], [170, 171, 172, 173, 174,
		 175, 176, 177, 178, 179], [180, 181, 182, 183, 184, 185, 186, 187, 188, 189], [
		190, 191, 192, 193, 194, 195, 196, 197, 198, 199], [200, 201, 202, 203, 204, 205
		, 206, 207, 208, 209], [210, 211, 212, 2...]]
		1000 distinct elements
		[[194, 282, 267, 128, 144, 904, 995, 341, 847, 740], [18, 281, 978, 769, 739, 10
		0, 9, 654, 414, 449], [545, 697, 528, 686, 682, 801, 336, 907, 980, 975], [588,
		786, 63, 896, 105, 402, 374, 977, 868, 256], [923, 294, 962, 31, 810, 763, 531,
		69, 485, 283], [96, 199, 843, 776, 454, 366, 495, 189, 493, 377], [575, 885, 712
		, 603, 97, 951, 172, 539, 601, 594], [869, 74, 872, 805, 113, 289, 477, 498, 371
		, 859], [361, 203, 391, 79, 940, 605, 500, 487, 65, 492], [71, 7, 61, 459, 227,
		726, 628, 142, 908, 481], [442, 971, 77, 482, 49, 789, 435, 364, 275, 668], [398
		, 70, 261, 346, 16, 534, 448, 757, 73, 476], [715, 280, 926, 983, 126, 543, 623,
		 867, 886, 929], [60, 168, 536, 513, 316, 753, 418, 673, 541, 22], [764, 571, 51
		1, 254, 587, 218, 232, 451, 604, 219], [737, 353, 792, 812, 305, 611, 625, 546,
		762, 552], [738, 910, 892, 404, 392, 323, 890, 784, 634, 122], [823, 169, 716, 4
		47, 758, 133, 964, 290, 656, 677], [458, 226, 774, 749, 857, 960, 958, 149, 119,
		 443], [742, 882, 768, 622, 644, 969, 35...]]
		1000 distinct elements
		
	3)
	
		
	4)
		
		It swaps values in the arrays.
		
	5)
	
		10 X 100'000 = 1'000'000 (10 thread and 100'000 iterations)
		
	6)
	
		We initially have 1'000 elements but after swapping we lose some of them. 
		(the number depends on the execution)
		
	7)
	
		Do this ->
		
			 synchronized public static void swap() { ...
			 
		Tested this 20 times, it always worked.
		
Step 2)

	
	2)
	
		It's the same as calling a composition of functions.
	
	3)
	
		Still swapping values.
		
	4)
		It returns a value. It can be overwritten to return other values or in other formats.
	
	5)
		
		it repeats (which is a loop) , "nthreads" number of times, the instruction swap, which is made, niters number of times.

	6)

		TO FINISH
		