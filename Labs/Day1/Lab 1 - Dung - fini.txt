Bisma Janjua
Quang Dung Ngo

Step 1
1. Check out the TIOBE index. Give two reasons why it is bogus.
	It is a lagging index, it looks at how many pages Google finds on 
	the language that is being searched
	
	It is also  not accurate, or up to date becuase it uses some search engines 
 	that allow query pages that have been added last year. 
	
2. What programming languages do you and your partner know well?
	Bisma: Java, C++
	
	Quang-Dung: C, C++, Java

3. Name one language each that you and your partner had to learn in a hurry. Why did you have to?
	Bisma: C, for a class 
	
	Quang-Dung: Scala, because it was a new language

----------------------------------------------------------------------	
	
Step 2

2. 
def map(a)
  r = []
  for i in a
    r.push(yield(i))
  end
  return r
end
map([1,2,3]) { |x| x * x }
map([4,5,6]) { |y| y + 1 }

----------------------------------------------------------------------

Step 3

1.
class Tree
  attr_accessor :children, :name
  def initialize(name, children = [])
    @name=name
    @children=children
  end
  def visit(&block)  # & captures otherwise anonymous block
    block.call(self)  # self is implicit parameter ("this" in C++/Java)
    children.each { |c| c.visit(&block) }
  end
end

t=Tree.new(84, [Tree.new(7), Tree.new(12, [Tree.new(2), Tree.new(2), Tree.new(3)])])

2.
class Tree
  attr_accessor :children, :name
  def initialize(name, children = [])
    @name=name
    @children=children
  end
  def visit(&block)  # & captures otherwise anonymous block
    block.call(self)  # self is implicit parameter ("this" in C++/Java)
    children.each { |c| c.visit(&block) }
  end
end

t=Tree.new(84, [Tree.new(7), Tree.new(12, [Tree.new(2), Tree.new(2), Tree.new(3)])])
sum = 0
t.visit { |n| sum += p(n.name) }
sum
 
Step 4

1. 
t.class
=> Tree

2. 
t.methods
=> [:children, :children=, :name, :name=, :visit, :map, :nil?, :===, :=~, :!~, :
eql?, :hash, :<=>, :class, :singleton_class, :clone, :dup, :initialize_dup, :ini
tialize_clone, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :free
ze, :frozen?, :to_s, :inspect, :methods, :singleton_methods, :protected_methods,
 :private_methods, :public_methods, :instance_variables, :instance_variable_get,
 :instance_variable_set, :instance_variable_defined?, :instance_of?, :kind_of?,
:is_a?, :tap, :send, :public_send, :respond_to?, :respond_to_missing?, :extend,
:display, :method, :public_method, :define_singleton_method, :object_id, :to_enu
m, :enum_for, :==, :equal?, :!, :!=, :instance_eval, :instance_exec, :__send__,
:__id__]

all of the methods that t is capable of 

3. t.methods.sort
=> [:!, :!=, :!~, :<=>, :==, :===, :=~, :__id__, :__send__, :children, :children
=, :class, :clone, :define_singleton_method, :display, :dup, :enum_for, :eql?, :
equal?, :extend, :freeze, :frozen?, :hash, :initialize_clone, :initialize_dup, :
inspect, :instance_eval, :instance_exec, :instance_of?, :instance_variable_defin
ed?, :instance_variable_get, :instance_variable_set, :instance_variables, :is_a?
, :kind_of?, :map, :method, :methods, :name, :name=, :nil?, :object_id, :private
_methods, :protected_methods, :public_method, :public_methods, :public_send, :re
spond_to?, :respond_to_missing?, :send, :singleton_class, :singleton_methods, :t
aint, :tainted?, :tap, :to_enum, :to_s, :trust, :untaint, :untrust, :untrusted?,
 :visit]

5 methods that were provided by the class (and not inherited):

irb(main):260:0> (Tree.public_instance_methods - Object.public_instance_method>).sort
=> "children children= name name= visit"


4. t.class.class
=> Class

t.methods.methods
=> [:inspect, :to_s, :to_a, :to_ary, :frozen?, :==, :eql?, :hash, :[], :[]=, :at
, :fetch, :first, :last, :concat, :<<, :push, :pop, :shift, :unshift, :insert, :
each, :each_index, :reverse_each, :length, :size, :empty?, :find_index, :index,
:rindex, :join, :reverse, :reverse!, :rotate, :rotate!, :sort, :sort!, :sort_by!
, :collect, :collect!, :map, :map!, :select, :select!, :keep_if, :values_at, :de
lete, :delete_at, :delete_if, :reject, :reject!, :zip, :transpose, :replace, :cl
ear, :fill, :include?, :<=>, :slice, :slice!, :assoc, :rassoc, :+, :*, :-, :&, :
|, :uniq, :uniq!, :compact, :compact!, :flatten, :flatten!, :count, :shuffle!, :
shuffle, :sample, :cycle, :permutation, :combination, :repeated_permutation, :re
peated_combination, :product, :take, :take_while, :drop, :drop_while, :pack, :en
tries, :sort_by, :grep, :find, :detect, :find_all, :flat_map, :collect_concat, :
inject, :reduce, :partition, :group_by, :all?, :any?, :one?, :none?, :min, :max,
 :minmax, :min_by, :max_by, :minmax_by, :member?, :each_with_index, :each_entry,
 :each_slice, :each_cons, :each_with_object, :chunk, :slice_before, :nil?, :===,
 :=~, :!~, :class, :singleton_class, :clone, :dup, :initialize_dup, :initialize_
clone, :taint, :tainted?, :untaint, :untrust, :untrusted?, :trust, :freeze, :met
hods, :singleton_methods, :protected_methods, :private_methods, :public_methods,
 :instance_variables, :instance_variable_get, :instance_variable_set, :instance_
variable_defined?, :instance_of?, :kind_of?, :is_a?, :tap, :send, :public_send,
:respond_to?, :respond_to_missing?, :extend, :display, :method, :public_method,
:define_singleton_method, :object_id, :to_enum, :enum_for, :equal?, :!, :!=, :in
stance_eval, :instance_exec, :__send__, :__id__]






